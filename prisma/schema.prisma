generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  shops          Shop[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shop {
  id              String           @id @default(cuid())
  name            String           @unique
  pathName        String           @unique
  description     String?
  images          Json? // {url: string, alt: string}[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  styleComponents StyleComponent[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  links           Link[]
  nbViews         NbViews[]
}

model NbViews {
  id     String   @id @default(cuid())
  date   DateTime @default(now())
  count  Int      @default(0)
  type   String
  linkId String?
  shopId String?
  link   Link?    @relation(fields: [linkId], references: [id], onDelete: Cascade)
  shop   Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Link {
  id      String        @id @default(cuid())
  url     String
  shopId  String
  paid    Boolean       @default(false)
  price   Int?
  shop    Shop          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  payment PaymentLink[]
  nbViews NbViews[]
}

model PaymentLink {
  id String @id @default(cuid())

  link     Link    @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId   String
  stripeId String?
}

model StyleComponent {
  id          String   @id @default(cuid())
  name        String
  description String?
  details     Json? // {key: string, value: string}[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}
